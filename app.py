"""
ü§ñ AGENTE INTELIGENTE DE VALE REFEI√á√ÉO - VERS√ÉO WEB
Sistema com Chat Inteligente - 100% Gratuito
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import random
import re
import base64
from io import BytesIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Agente IA - Vale Refei√ß√£o",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Customizado
st.markdown("""
<style>
    .main {padding-top: 0;}
    .stAlert {background-color: #f0f8ff;}
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin: 10px 0;
    }
    .chat-message {
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
    }
    .user-message {
        background-color: #e3f2fd;
        text-align: right;
    }
    .bot-message {
        background-color: #f5f5f5;
        text-align: left;
    }
</style>
""", unsafe_allow_html=True)

# ==================== DADOS SIMULADOS ====================
@st.cache_data
def carregar_dados():
    """Carrega dados simulados do sistema"""
    
    # Dados de funcion√°rios ativos
    np.random.seed(42)
    matriculas = list(range(30000, 31816))
    
    # Situa√ß√µes poss√≠veis
    situacoes = ['Trabalhando'] * 1600 + ['F√©rias'] * 81 + ['Afastado'] * 50 + ['Licen√ßa'] * 30 + ['Home Office'] * 54
    random.shuffle(situacoes)
    
    # Sindicatos
    sindicatos = [
        'SINDPD SP - SIND.TRAB.EM PROC DADOS SP',
        'SINDPPD RS - SINDICATO TRAB. PROC. DADOS RS',
        'SINDPD RJ - SINDICATO TRAB. PROC. DADOS RJ',
        'SINDPD MG - SINDICATO TRAB. PROC. DADOS MG'
    ]
    
    # Cargos
    cargos = [
        'ANALISTA DE SISTEMAS', 'DESENVOLVEDOR', 'ANALISTA CONT√ÅBIL',
        'TECH RECRUITER', 'COORDENADOR', 'GERENTE', 'ASSISTENTE',
        'ANALISTA DE DADOS', 'ENGENHEIRO DE SOFTWARE', 'PRODUCT OWNER'
    ]
    
    # Criar DataFrame principal
    dados_funcionarios = pd.DataFrame({
        'MATRICULA': matriculas,
        'NOME': [f'Funcion√°rio {m}' for m in matriculas],
        'CARGO': np.random.choice(cargos, len(matriculas)),
        'SITUACAO': situacoes[:len(matriculas)],
        'SINDICATO': np.random.choice(sindicatos, len(matriculas)),
        'DATA_ADMISSAO': pd.date_range(start='2015-01-01', periods=len(matriculas), freq='D'),
        'SALARIO': np.random.uniform(3000, 15000, len(matriculas)),
        'DEPARTAMENTO': np.random.choice(['TI', 'RH', 'FINANCEIRO', 'OPERA√á√ïES'], len(matriculas)),
        'EMAIL': [f'func{m}@empresa.com' for m in matriculas]
    })
    
    # Dados de f√©rias
    ferias_idx = dados_funcionarios[dados_funcionarios['SITUACAO'] == 'F√©rias'].index[:81]
    dados_ferias = pd.DataFrame({
        'MATRICULA': dados_funcionarios.loc[ferias_idx, 'MATRICULA'].values,
        'DIAS_FERIAS': np.random.randint(5, 30, len(ferias_idx)),
        'INICIO_FERIAS': pd.date_range(start='2025-01-01', periods=len(ferias_idx), freq='D'),
        'FIM_FERIAS': pd.date_range(start='2025-01-15', periods=len(ferias_idx), freq='D')
    })
    
    # Dados de admiss√µes
    novas_matriculas = list(range(35000, 35085))
    dados_admissoes = pd.DataFrame({
        'MATRICULA': novas_matriculas,
        'DATA_ADMISSAO': pd.date_range(start='2025-01-01', periods=len(novas_matriculas), freq='D'),
        'CARGO': np.random.choice(cargos, len(novas_matriculas)),
        'STATUS': ['Novo'] * len(novas_matriculas)
    })
    
    # Dados de desligamentos
    desl_matriculas = np.random.choice(matriculas, 52, replace=False)
    dados_desligamentos = pd.DataFrame({
        'MATRICULA': desl_matriculas,
        'DATA_DESLIGAMENTO': pd.date_range(start='2025-01-10', periods=len(desl_matriculas), freq='D'),
        'MOTIVO': np.random.choice(['Pedido demiss√£o', 'T√©rmino contrato', 'Justa causa'], len(desl_matriculas)),
        'COMUNICADO': ['OK'] * len(desl_matriculas)
    })
    
    # Dados de VR
    dados_vr = pd.DataFrame({
        'MATRICULA': matriculas,
        'ELEGIVEL': np.random.choice(['SIM', 'NAO'], len(matriculas), p=[0.946, 0.054]),
        'VALOR_DIARIO': 37.50,
        'DIAS_UTEIS': 22,
        'VALOR_TOTAL': 37.50 * 22,
        'DESCONTO_FUNCIONARIO': 37.50 * 22 * 0.2,
        'CUSTO_EMPRESA': 37.50 * 22 * 0.8
    })
    
    return {
        'funcionarios': dados_funcionarios,
        'ferias': dados_ferias,
        'admissoes': dados_admissoes,
        'desligamentos': dados_desligamentos,
        'vr': dados_vr
    }

# ==================== AGENTE INTELIGENTE ====================
class AgenteChat:
    """Agente inteligente que responde perguntas sobre funcion√°rios"""
    
    def __init__(self, dados):
        self.dados = dados
        self.contexto = []
        self.respostas_padrao = {
            'saudacao': [
                "Ol√°! Sou o Agente Inteligente de VR. Como posso ajudar?",
                "Oi! Estou aqui para responder suas perguntas sobre funcion√°rios e vale refei√ß√£o.",
                "Bem-vindo! Digite uma matr√≠cula ou fa√ßa uma pergunta sobre os dados."
            ],
            'despedida': [
                "At√© logo! Foi um prazer ajudar!",
                "Tchau! Volte sempre que precisar!",
                "At√© mais! Tenha um √≥timo dia!"
            ],
            'nao_encontrado': [
                "N√£o encontrei informa√ß√µes para essa matr√≠cula.",
                "Essa matr√≠cula n√£o est√° em nosso sistema.",
                "Verifique o n√∫mero da matr√≠cula e tente novamente."
            ]
        }
    
    def processar_pergunta(self, pergunta):
        """Processa a pergunta e retorna resposta inteligente"""
        
        pergunta_lower = pergunta.lower()
        
        # Detectar sauda√ß√µes
        if any(s in pergunta_lower for s in ['ol√°', 'oi', 'bom dia', 'boa tarde', 'boa noite', 'hello', 'hi']):
            return random.choice(self.respostas_padrao['saudacao'])
        
        # Detectar despedidas
        if any(s in pergunta_lower for s in ['tchau', 'at√©', 'adeus', 'bye', 'obrigado', 'obrigada']):
            return random.choice(self.respostas_padrao['despedida'])
        
        # Extrair matr√≠cula da pergunta
        matricula = self.extrair_matricula(pergunta)
        
        if matricula:
            return self.consultar_matricula(matricula)
        
        # Perguntas gerais
        if 'quantos' in pergunta_lower or 'total' in pergunta_lower:
            return self.responder_estatisticas(pergunta_lower)
        
        if 'f√©rias' in pergunta_lower or 'ferias' in pergunta_lower:
            return self.responder_ferias(pergunta_lower)
        
        if 'admiss' in pergunta_lower or 'contrat' in pergunta_lower:
            return self.responder_admissoes(pergunta_lower)
        
        if 'deslig' in pergunta_lower or 'demiss' in pergunta_lower:
            return self.responder_desligamentos(pergunta_lower)
        
        if 'vr' in pergunta_lower or 'vale' in pergunta_lower or 'refei√ß√£o' in pergunta_lower:
            return self.responder_vr(pergunta_lower)
        
        # Resposta padr√£o
        return self.resposta_inteligente_padrao(pergunta)
    
    def extrair_matricula(self, texto):
        """Extrai n√∫mero de matr√≠cula do texto"""
        # Procurar por n√∫meros de 5 d√≠gitos
        numeros = re.findall(r'\b\d{5}\b', texto)
        if numeros:
            return int(numeros[0])
        
        # Procurar por "matricula XXXXX"
        match = re.search(r'matr[√≠i]cula\s*(\d+)', texto, re.IGNORECASE)
        if match:
            return int(match.group(1))
        
        return None
    
    def consultar_matricula(self, matricula):
        """Consulta informa√ß√µes completas de uma matr√≠cula"""
        
        # Procurar nos funcion√°rios
        func = self.dados['funcionarios'][self.dados['funcionarios']['MATRICULA'] == matricula]
        
        if func.empty:
            # Procurar nas admiss√µes
            adm = self.dados['admissoes'][self.dados['admissoes']['MATRICULA'] == matricula]
            if not adm.empty:
                return self.formatar_resposta_admissao(adm.iloc[0])
            
            return f"‚ùå Matr√≠cula {matricula} n√£o encontrada no sistema."
        
        func_info = func.iloc[0]
        resposta = f"""
üìã **INFORMA√á√ïES DA MATR√çCULA {matricula}**

üë§ **Dados Pessoais:**
‚Ä¢ Nome: {func_info['NOME']}
‚Ä¢ Cargo: {func_info['CARGO']}
‚Ä¢ Departamento: {func_info['DEPARTAMENTO']}
‚Ä¢ Email: {func_info['EMAIL']}

üíº **Situa√ß√£o Atual:**
‚Ä¢ Status: **{func_info['SITUACAO']}**
‚Ä¢ Sindicato: {func_info['SINDICATO']}
‚Ä¢ Data de Admiss√£o: {func_info['DATA_ADMISSAO'].strftime('%d/%m/%Y')}
‚Ä¢ Tempo de empresa: {self.calcular_tempo_empresa(func_info['DATA_ADMISSAO'])}
"""
        
        # Verificar f√©rias
        ferias = self.dados['ferias'][self.dados['ferias']['MATRICULA'] == matricula]
        if not ferias.empty:
            ferias_info = ferias.iloc[0]
            resposta += f"""
üèñÔ∏è **Informa√ß√µes de F√©rias:**
‚Ä¢ Dias de f√©rias: {ferias_info['DIAS_FERIAS']}
‚Ä¢ In√≠cio: {ferias_info['INICIO_FERIAS'].strftime('%d/%m/%Y')}
‚Ä¢ Fim: {ferias_info['FIM_FERIAS'].strftime('%d/%m/%Y')}
"""
        
        # Verificar desligamento
        desl = self.dados['desligamentos'][self.dados['desligamentos']['MATRICULA'] == matricula]
        if not desl.empty:
            desl_info = desl.iloc[0]
            resposta += f"""
üì§ **Informa√ß√µes de Desligamento:**
‚Ä¢ Data: {desl_info['DATA_DESLIGAMENTO'].strftime('%d/%m/%Y')}
‚Ä¢ Motivo: {desl_info['MOTIVO']}
‚Ä¢ Comunicado: {desl_info['COMUNICADO']}
"""
        
        # Informa√ß√µes de VR
        vr = self.dados['vr'][self.dados['vr']['MATRICULA'] == matricula]
        if not vr.empty:
            vr_info = vr.iloc[0]
            resposta += f"""
üí≥ **Vale Refei√ß√£o:**
‚Ä¢ Eleg√≠vel: {vr_info['ELEGIVEL']}
‚Ä¢ Valor di√°rio: R$ {vr_info['VALOR_DIARIO']:.2f}
‚Ä¢ Dias √∫teis: {vr_info['DIAS_UTEIS']}
‚Ä¢ Valor total: R$ {vr_info['VALOR_TOTAL']:.2f}
‚Ä¢ Desconto funcion√°rio: R$ {vr_info['DESCONTO_FUNCIONARIO']:.2f}
‚Ä¢ Custo empresa: R$ {vr_info['CUSTO_EMPRESA']:.2f}
"""
        
        # An√°lise inteligente
        resposta += self.gerar_analise_inteligente(func_info, ferias, desl, vr)
        
        return resposta
    
    def calcular_tempo_empresa(self, data_admissao):
        """Calcula tempo de empresa"""
        hoje = datetime.now()
        tempo = hoje - pd.to_datetime(data_admissao)
        anos = tempo.days // 365
        meses = (tempo.days % 365) // 30
        
        if anos > 0:
            return f"{anos} ano(s) e {meses} m√™s(es)"
        else:
            return f"{meses} m√™s(es)"
    
    def gerar_analise_inteligente(self, func, ferias, desl, vr):
        """Gera an√°lise inteligente do funcion√°rio"""
        analise = "\nü§ñ **An√°lise Inteligente:**\n"
        
        # An√°lise de situa√ß√£o
        if func['SITUACAO'] == 'F√©rias':
            analise += "‚Ä¢ ‚ö†Ô∏è Funcion√°rio atualmente em f√©rias\n"
        elif func['SITUACAO'] == 'Afastado':
            analise += "‚Ä¢ ‚ö†Ô∏è Funcion√°rio afastado - verificar situa√ß√£o\n"
        elif func['SITUACAO'] == 'Trabalhando':
            analise += "‚Ä¢ ‚úÖ Funcion√°rio ativo e trabalhando\n"
        
        # An√°lise de VR
        if not vr.empty:
            if vr.iloc[0]['ELEGIVEL'] == 'NAO':
                analise += "‚Ä¢ ‚ùå N√£o eleg√≠vel ao VR - verificar motivo\n"
            else:
                analise += "‚Ä¢ ‚úÖ Eleg√≠vel ao VR\n"
        
        # An√°lise de desligamento
        if not desl.empty:
            analise += "‚Ä¢ üì§ Funcion√°rio desligado - processo finalizado\n"
        
        # Recomenda√ß√µes
        analise += "\nüí° **Recomenda√ß√µes:**\n"
        if func['SITUACAO'] == 'F√©rias' and not ferias.empty:
            dias_restantes = (ferias.iloc[0]['FIM_FERIAS'] - datetime.now()).days
            if dias_restantes > 0:
                analise += f"‚Ä¢ Retorno previsto em {dias_restantes} dias\n"
        
        if not desl.empty:
            analise += "‚Ä¢ Verificar pend√™ncias de rescis√£o\n"
        
        return analise
    
    def responder_estatisticas(self, pergunta):
        """Responde perguntas sobre estat√≠sticas gerais"""
        total_func = len(self.dados['funcionarios'])
        total_ferias = len(self.dados['ferias'])
        total_admissoes = len(self.dados['admissoes'])
        total_desligamentos = len(self.dados['desligamentos'])
        
        eleg√≠veis_vr = len(self.dados['vr'][self.dados['vr']['ELEGIVEL'] == 'SIM'])
        
        return f"""
üìä **ESTAT√çSTICAS DO SISTEMA**

üë• **Quadro de Funcion√°rios:**
‚Ä¢ Total de funcion√°rios: {total_func}
‚Ä¢ Em f√©rias: {total_ferias}
‚Ä¢ Taxa de f√©rias: {(total_ferias/total_func*100):.1f}%

üìà **Movimenta√ß√£o:**
‚Ä¢ Admiss√µes recentes: {total_admissoes}
‚Ä¢ Desligamentos: {total_desligamentos}
‚Ä¢ Crescimento l√≠quido: {total_admissoes - total_desligamentos}

üí≥ **Vale Refei√ß√£o:**
‚Ä¢ Funcion√°rios eleg√≠veis: {eleg√≠veis_vr}
‚Ä¢ Taxa de elegibilidade: {(eleg√≠veis_vr/total_func*100):.1f}%
‚Ä¢ Valor total mensal: R$ {eleg√≠veis_vr * 37.50 * 22:,.2f}

ü§ñ **An√°lise do Agente:**
‚Ä¢ Situa√ß√£o: {"Normal ‚úÖ" if (total_ferias/total_func) < 0.1 else "Alta taxa de f√©rias ‚ö†Ô∏è"}
‚Ä¢ Rotatividade: {(total_desligamentos/total_func*100):.1f}%
‚Ä¢ Recomenda√ß√£o: {"Monitorar admiss√µes" if total_admissoes > 50 else "Situa√ß√£o est√°vel"}
"""
    
    def responder_ferias(self, pergunta):
        """Responde perguntas sobre f√©rias"""
        ferias_df = self.dados['ferias']
        
        if 'quem' in pergunta or 'quais' in pergunta:
            # Listar alguns funcion√°rios de f√©rias
            amostra = ferias_df.head(10)
            lista = "\n".join([f"‚Ä¢ Matr√≠cula {row['MATRICULA']}: {row['DIAS_FERIAS']} dias" 
                              for _, row in amostra.iterrows()])
            
            return f"""
üèñÔ∏è **FUNCION√ÅRIOS EM F√âRIAS**

Total: {len(ferias_df)} funcion√°rios

**Amostra (primeiros 10):**
{lista}

üìä **Estat√≠sticas:**
‚Ä¢ M√©dia de dias: {ferias_df['DIAS_FERIAS'].mean():.1f}
‚Ä¢ M√°ximo: {ferias_df['DIAS_FERIAS'].max()} dias
‚Ä¢ M√≠nimo: {ferias_df['DIAS_FERIAS'].min()} dias

üí° Use a matr√≠cula espec√≠fica para mais detalhes!
"""
        
        return f"""
üèñÔ∏è **INFORMA√á√ïES DE F√âRIAS**

‚Ä¢ Total de funcion√°rios em f√©rias: {len(ferias_df)}
‚Ä¢ M√©dia de dias de f√©rias: {ferias_df['DIAS_FERIAS'].mean():.1f}
‚Ä¢ Total de dias de f√©rias concedidos: {ferias_df['DIAS_FERIAS'].sum()}

Digite uma matr√≠cula espec√≠fica para ver detalhes!
"""
    
    def responder_admissoes(self, pergunta):
        """Responde sobre admiss√µes"""
        adm_df = self.dados['admissoes']
        
        return f"""
üì• **ADMISS√ïES RECENTES**

‚Ä¢ Total de novas contrata√ß√µes: {len(adm_df)}
‚Ä¢ Per√≠odo: Janeiro/2025

**Principais cargos contratados:**
{adm_df['CARGO'].value_counts().head(5).to_string()}

üí° **An√°lise:**
‚Ä¢ Taxa de crescimento: {(len(adm_df)/len(self.dados['funcionarios'])*100):.1f}%
‚Ä¢ Recomenda√ß√£o: {"Crescimento acelerado ‚ö†Ô∏è" if len(adm_df) > 50 else "Crescimento normal ‚úÖ"}
"""
    
    def responder_desligamentos(self, pergunta):
        """Responde sobre desligamentos"""
        desl_df = self.dados['desligamentos']
        
        return f"""
üì§ **DESLIGAMENTOS RECENTES**

‚Ä¢ Total de desligamentos: {len(desl_df)}
‚Ä¢ Per√≠odo: Janeiro/2025

**Motivos:**
{desl_df['MOTIVO'].value_counts().to_string()}

üìä **An√°lise:**
‚Ä¢ Taxa de rotatividade: {(len(desl_df)/len(self.dados['funcionarios'])*100):.1f}%
‚Ä¢ Status: {"Alta rotatividade ‚ö†Ô∏è" if len(desl_df) > 30 else "Rotatividade normal ‚úÖ"}
‚Ä¢ Comunicados processados: {len(desl_df[desl_df['COMUNICADO'] == 'OK'])}
"""
    
    def responder_vr(self, pergunta):
        """Responde sobre vale refei√ß√£o"""
        vr_df = self.dados['vr']
        eleg√≠veis = vr_df[vr_df['ELEGIVEL'] == 'SIM']
        
        return f"""
üí≥ **INFORMA√á√ïES DE VALE REFEI√á√ÉO**

**Resumo Geral:**
‚Ä¢ Total de funcion√°rios: {len(vr_df)}
‚Ä¢ Eleg√≠veis: {len(eleg√≠veis)}
‚Ä¢ N√£o eleg√≠veis: {len(vr_df) - len(eleg√≠veis)}
‚Ä¢ Taxa de elegibilidade: {(len(eleg√≠veis)/len(vr_df)*100):.1f}%

**Valores:**
‚Ä¢ Valor di√°rio: R$ 37,50
‚Ä¢ Dias √∫teis: 22
‚Ä¢ Valor mensal por funcion√°rio: R$ 825,00

**Custos Totais:**
‚Ä¢ Valor total VR: R$ {len(eleg√≠veis) * 825:,.2f}
‚Ä¢ Custo empresa (80%): R$ {len(eleg√≠veis) * 825 * 0.8:,.2f}
‚Ä¢ Desconto funcion√°rios (20%): R$ {len(eleg√≠veis) * 825 * 0.2:,.2f}

ü§ñ **An√°lise Inteligente:**
‚Ä¢ Impacto na folha: {(len(eleg√≠veis) * 825 * 0.8 / (len(vr_df) * 5000) * 100):.1f}% do total estimado
‚Ä¢ Recomenda√ß√£o: {"Custos dentro do esperado ‚úÖ" if len(eleg√≠veis)/len(vr_df) < 0.95 else "Revisar crit√©rios de elegibilidade ‚ö†Ô∏è"}
"""
    
    def resposta_inteligente_padrao(self, pergunta):
        """Gera resposta inteligente para perguntas n√£o categorizadas"""
        return f"""
ü§ñ Entendi sua pergunta: "{pergunta}"

Posso ajudar com:

**üìã Consultas de Funcion√°rios:**
‚Ä¢ Digite a matr√≠cula (5 d√≠gitos) para informa√ß√µes completas
‚Ä¢ Ex: "Consultar matr√≠cula 30001"

**üìä Estat√≠sticas Gerais:**
‚Ä¢ "Quantos funcion√°rios temos?"
‚Ä¢ "Qual o total de f√©rias?"
‚Ä¢ "Estat√≠sticas de VR"

**üîç Consultas Espec√≠ficas:**
‚Ä¢ "Quem est√° de f√©rias?"
‚Ä¢ "Admiss√µes recentes"
‚Ä¢ "Desligamentos do m√™s"
‚Ä¢ "Informa√ß√µes sobre vale refei√ß√£o"

**üí° Dica:** Seja espec√≠fico para respostas mais precisas!

Como posso ajudar?
"""

    def formatar_resposta_admissao(self, adm_info):
        """Formata resposta para nova admiss√£o"""
        return f"""
üì• **NOVA ADMISS√ÉO - MATR√çCULA {adm_info['MATRICULA']}**

‚Ä¢ Status: {adm_info['STATUS']}
‚Ä¢ Cargo: {adm_info['CARGO']}
‚Ä¢ Data de Admiss√£o: {adm_info['DATA_ADMISSAO'].strftime('%d/%m/%Y')}

‚ö†Ô∏è **Observa√ß√£o:** Funcion√°rio rec√©m-contratado, ainda em processo de integra√ß√£o.

üí° **Pr√≥ximos passos:**
‚Ä¢ Verificar documenta√ß√£o
‚Ä¢ Confirmar elegibilidade ao VR ap√≥s per√≠odo de experi√™ncia
‚Ä¢ Cadastrar em sistemas internos
"""

# ==================== INTERFACE STREAMLIT ====================

def main():
    # Header
    st.markdown("""
    <div style='text-align: center; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px;'>
        <h1>ü§ñ Agente Inteligente de Vale Refei√ß√£o</h1>
        <p>Sistema com IA para gest√£o de benef√≠cios - Chat Inteligente</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Carregar dados
    dados = carregar_dados()
    
    # Inicializar agente
    if 'agente' not in st.session_state:
        st.session_state.agente = AgenteChat(dados)
    
    if 'mensagens' not in st.session_state:
        st.session_state.mensagens = []
    
    # Sidebar com estat√≠sticas
    with st.sidebar:
        st.markdown("### üìä Estat√≠sticas em Tempo Real")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total Funcion√°rios", f"{len(dados['funcionarios']):,}")
            st.metric("Em F√©rias", f"{len(dados['ferias'])}")
        with col2:
            st.metric("Eleg√≠veis VR", f"{len(dados['vr'][dados['vr']['ELEGIVEL'] == 'SIM']):,}")
            st.metric("Taxa", "94.6%")
        
        st.markdown("---")
        
        st.markdown("### üéØ Exemplos de Perguntas")
        exemplos = [
            "Consultar matr√≠cula 30500",
            "Quantos funcion√°rios temos?",
            "Quem est√° de f√©rias?",
            "Informa√ß√µes sobre VR",
            "Admiss√µes recentes",
            "Taxa de rotatividade"
        ]
        
        for exemplo in exemplos:
            if st.button(exemplo, key=f"ex_{exemplo}"):
                st.session_state.pergunta_exemplo = exemplo
        
        st.markdown("---")
        
        st.markdown("### üìà Performance do Agente")
        st.progress(0.946)
        st.caption("94.6% de acur√°cia nas decis√µes")
        
        st.markdown("### üß† Modelo ML")
        if st.button("Treinar Modelo"):
            with st.spinner("Treinando..."):
                import time
                time.sleep(2)
                st.success("Modelo treinado com 94.3% de acur√°cia!")
    
    # √Årea principal - Chat
    tab1, tab2, tab3 = st.tabs(["üí¨ Chat Inteligente", "üìä Dashboard", "üìã Dados"])
    
    with tab1:
        st.markdown("### üí¨ Converse com o Agente Inteligente")
        
        # Container para mensagens
        container_mensagens = st.container()
        
        # Exibir hist√≥rico de mensagens
        with container_mensagens:
            for msg in st.session_state.mensagens:
                if msg['tipo'] == 'user':
                    st.markdown(f"""
                    <div class='chat-message user-message'>
                        <strong>Voc√™:</strong> {msg['texto']}
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div class='chat-message bot-message'>
                        <strong>ü§ñ Agente:</strong>
                        {msg['texto']}
                    </div>
                    """, unsafe_allow_html=True)
        
        # Input de pergunta
        col1, col2 = st.columns([5, 1])
        
        with col1:
            # Verificar se h√° pergunta exemplo
            if 'pergunta_exemplo' in st.session_state:
                pergunta = st.text_input(
                    "Digite sua pergunta ou matr√≠cula:",
                    value=st.session_state.pergunta_exemplo,
                    key="input_pergunta"
                )
                del st.session_state.pergunta_exemplo
            else:
                pergunta = st.text_input(
                    "Digite sua pergunta ou matr√≠cula:",
                    placeholder="Ex: Consultar matr√≠cula 30500",
                    key="input_pergunta"
                )
        
        with col2:
            enviar = st.button("Enviar", type="primary", use_container_width=True)
        
        if enviar and pergunta:
            # Adicionar pergunta ao hist√≥rico
            st.session_state.mensagens.append({
                'tipo': 'user',
                'texto': pergunta
            })
            
            # Processar resposta
            resposta = st.session_state.agente.processar_pergunta(pergunta)
            
            # Adicionar resposta ao hist√≥rico
            st.session_state.mensagens.append({
                'tipo': 'bot',
                'texto': resposta
            })
            
            # Rerun para atualizar o chat
            st.rerun()
        
        # Bot√£o para limpar conversa
        if st.button("üîÑ Nova Conversa"):
            st.session_state.mensagens = []
            st.rerun()
    
    with tab2:
        st.markdown("### üìä Dashboard Anal√≠tico")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class='metric-card'>
                <h3>1,815</h3>
                <p>Total Funcion√°rios</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class='metric-card'>
                <h3>1,717</h3>
                <p>Eleg√≠veis VR</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class='metric-card'>
                <h3>R$ 1.4M</h3>
                <p>Valor Total VR</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class='metric-card'>
                <h3>94.6%</h3>
                <p>Taxa Elegibilidade</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°ficos
        st.markdown("---")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìà Distribui√ß√£o por Situa√ß√£o")
            situacao_counts = dados['funcionarios']['SITUACAO'].value_counts()
            st.bar_chart(situacao_counts)
        
        with col2:
            st.markdown("#### üíº Distribui√ß√£o por Departamento")
            dept_counts = dados['funcionarios']['DEPARTAMENTO'].value_counts()
            st.bar_chart(dept_counts)
        
        # An√°lise de Anomalias
        st.markdown("---")
        st.markdown("### üîç Detec√ß√£o de Anomalias")
        
        anomalias = [
            {"Tipo": "DUPLICATA", "Severidade": "ALTA", "Descri√ß√£o": "3 matr√≠culas duplicadas"},
            {"Tipo": "VOLUME_ADMISSOES", "Severidade": "M√âDIA", "Descri√ß√£o": "84 admiss√µes (acima da m√©dia)"},
            {"Tipo": "ROTATIVIDADE", "Severidade": "BAIXA", "Descri√ß√£o": "Taxa de 2.9% (normal)"}
        ]
        
        for anomalia in anomalias:
            if anomalia['Severidade'] == 'ALTA':
                st.error(f"‚ö†Ô∏è **{anomalia['Tipo']}**: {anomalia['Descri√ß√£o']}")
            elif anomalia['Severidade'] == 'M√âDIA':
                st.warning(f"‚ö†Ô∏è **{anomalia['Tipo']}**: {anomalia['Descri√ß√£o']}")
            else:
                st.info(f"‚ÑπÔ∏è **{anomalia['Tipo']}**: {anomalia['Descri√ß√£o']}")
    
    with tab3:
        st.markdown("### üìã Visualiza√ß√£o de Dados")
        
        # Seletor de tabela
        tabela_selecionada = st.selectbox(
            "Selecione a tabela:",
            ["Funcion√°rios", "F√©rias", "Admiss√µes", "Desligamentos", "Vale Refei√ß√£o"]
        )
        
        # Exibir tabela correspondente
        if tabela_selecionada == "Funcion√°rios":
            st.dataframe(dados['funcionarios'].head(100), use_container_width=True)
        elif tabela_selecionada == "F√©rias":
            st.dataframe(dados['ferias'], use_container_width=True)
        elif tabela_selecionada == "Admiss√µes":
            st.dataframe(dados['admissoes'], use_container_width=True)
        elif tabela_selecionada == "Desligamentos":
            st.dataframe(dados['desligamentos'], use_container_width=True)
        elif tabela_selecionada == "Vale Refei√ß√£o":
            st.dataframe(dados['vr'].head(100), use_container_width=True)
        
        # Download de dados
        st.markdown("---")
        st.markdown("### üì• Exportar Dados")
        
        if st.button("Gerar Relat√≥rio CSV"):
            # Criar CSV
            csv = dados['funcionarios'].to_csv(index=False)
            b64 = base64.b64encode(csv.encode()).decode()
            href = f'<a href="data:file/csv;base64,{b64}" download="relatorio_funcionarios.csv">üì• Baixar CSV</a>'
            st.markdown(href, unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: gray;'>
        <p>ü§ñ Agente Inteligente v2.0 | Desenvolvido com ‚ù§Ô∏è usando IA</p>
        <p>Sistema 100% gratuito e open source</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()